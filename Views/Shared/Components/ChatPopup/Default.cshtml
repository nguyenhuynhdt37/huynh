<div id="chat-popup" class="chat-popup">
    <div class="chat-header">
        <div class="chat-header-title">
            <i class="bi bi-robot"></i>
            <h5>Trợ lý học tập</h5>
        </div>
        <div class="chat-actions">
            <button id="reset-chat" class="btn btn-sm btn-outline-light" title="Reset Chat">
                <i class="bi bi-arrow-repeat"></i>
            </button>
            <button id="minimize-chat" class="btn btn-sm btn-outline-light" title="Minimize">
                <i class="bi bi-dash-lg"></i>
            </button>
        </div>
    </div>
    <div class="chat-body">
        <div id="chat-messages" class="chat-messages">
            <div class="message bot-message">
                <div class="message-avatar">
                    <i class="bi bi-robot"></i>
                </div>
                <div class="message-content">
                    <p>Xin chào! Tôi là trợ lý AI của khóa học lập trình. Tôi có thể giúp bạn:</p>
                    <ul>
                        <li>Giải thích các khái niệm lập trình</li>
                        <li>Hỗ trợ giải quyết bài tập</li>
                        <li>Cung cấp ví dụ mã nguồn</li>
                        <li>Trả lời câu hỏi về nội dung khóa học</li>
                    </ul>
                    <p>Bạn cần hỗ trợ gì hôm nay?</p>
                </div>
            </div>
        </div>
    </div>
    <div class="chat-footer">
        <form id="chat-form" class="d-flex">
            <input type="text" id="user-message" class="form-control" placeholder="Nhập câu hỏi của bạn..." required>
            <button type="submit" class="btn btn-primary send-btn">
                <i class="bi bi-send-fill"></i>
            </button>
        </form>
    </div>
</div>

<div id="chat-button" class="chat-button">
    <div class="chat-button-icon">
        <i class="bi bi-chat-dots-fill"></i>
    </div>
</div>

<style>
    :root {
        --chat-primary: #4361ee;
        --chat-primary-light: #4361ee20;
        --chat-secondary: #3f37c9;
        --chat-bg: #ffffff;
        --chat-text: #333333;
        --chat-text-light: #666666;
        --chat-border: #e6e6e6;
        --chat-user-bubble: #e3f2fd;
        --chat-bot-bubble: #f5f5f5;
        --chat-shadow: 0 5px 20px rgba(0, 0, 0, 0.15);
        --chat-transition: all 0.3s ease;
    }

    .chat-popup {
        position: fixed;
        bottom: 90px;
        right: 20px;
        width: 600px;
        height: 600px;
        background-color: var(--chat-bg);
        border-radius: 16px;
        box-shadow: var(--chat-shadow);
        display: flex;
        flex-direction: column;
        z-index: 1000;
        overflow: hidden;
        display: none;
        transform-origin: bottom right;
        transition: transform 0.3s ease, opacity 0.3s ease;
        border: 1px solid var(--chat-border);
    }

    .chat-popup.show {
        opacity: 1;
        transform: scale(1);
    }

    .chat-popup.hide {
        opacity: 0;
        transform: scale(0.8);
    }

    .chat-header {
        background: linear-gradient(135deg, var(--chat-primary), var(--chat-secondary));
        color: white;
        padding: 15px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-top-left-radius: 15px;
        border-top-right-radius: 15px;
    }

    .chat-header-title {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .chat-header-title i {
        font-size: 1.2rem;
    }

    .chat-header h5 {
        margin: 0;
        font-weight: 600;
    }

    .chat-actions {
        display: flex;
        gap: 8px;
    }

    .chat-actions button {
        width: 32px;
        height: 32px;
        padding: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        transition: var(--chat-transition);
        border: 1px solid rgba(255, 255, 255, 0.3);
    }

    .chat-actions button:hover {
        background-color: rgba(255, 255, 255, 0.2);
        transform: scale(1.05);
    }

    .chat-body {
        flex: 1;
        overflow-y: auto;
        padding: 20px;
        background-color: var(--chat-bg);
        scrollbar-width: thin;
        scrollbar-color: var(--chat-border) transparent;
    }

    .chat-body::-webkit-scrollbar {
        width: 6px;
    }

    .chat-body::-webkit-scrollbar-track {
        background: transparent;
    }

    .chat-body::-webkit-scrollbar-thumb {
        background-color: var(--chat-border);
        border-radius: 10px;
    }

    .chat-messages {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .message {
        display: flex;
        max-width: 85%;
        transition: opacity 0.3s ease, transform 0.3s ease;
    }

    .message.show {
        opacity: 1;
        transform: translateY(0);
    }

    .message.hide {
        opacity: 0;
        transform: translateY(10px);
    }

    .user-message {
        align-self: flex-end;
        flex-direction: row-reverse;
    }

    .bot-message {
        align-self: flex-start;
    }

    .message-avatar {
        width: 36px;
        height: 36px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 8px;
        flex-shrink: 0;
    }

    .user-message .message-avatar {
        background-color: var(--chat-primary);
        color: white;
    }

    .bot-message .message-avatar {
        background-color: var(--chat-secondary);
        color: white;
    }

    .message-content {
        padding: 12px 16px;
        width: 450px;
        border-radius: 18px;
        position: relative;
        word-wrap: break-word;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    }

    .user-message .message-content {
        background-color: var(--chat-primary);
        color: white;
        border-top-right-radius: 4px;
    }

    .bot-message .message-content {
        background-color: var(--chat-bot-bubble);
        color: var(--chat-text);
        border-top-left-radius: 4px;
    }

    .message-content p {
        margin: 0;
        line-height: 1.5;
    }

    .chat-footer {
        padding: 15px;
        border-top: 1px solid var(--chat-border);
        background-color: var(--chat-bg);
    }

    .chat-footer form {
        display: flex;
        gap: 10px;
    }

    #user-message {
        flex: 1;
        border-radius: 24px;
        padding: 10px 16px;
        border: 1px solid var(--chat-border);
        transition: var(--chat-transition);
    }

    #user-message:focus {
        box-shadow: 0 0 0 3px var(--chat-primary-light);
        border-color: var(--chat-primary);
    }

    .send-btn {
        width: 42px;
        height: 42px;
        border-radius: 50%;
        padding: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, var(--chat-primary), var(--chat-secondary));
        border: none;
        transition: var(--chat-transition);
    }

    .send-btn:hover {
        transform: scale(1.05);
        background: linear-gradient(135deg, var(--chat-secondary), var(--chat-primary));
    }

    .chat-button {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 60px;
        height: 60px;
        border-radius: 30px;
        background: linear-gradient(135deg, var(--chat-primary), var(--chat-secondary));
        color: white;
        display: flex;
        justify-content: center;
        align-items: center;
        cursor: pointer;
        box-shadow: var(--chat-shadow);
        z-index: 1000;
        transition: var(--chat-transition);
    }

    .chat-button:hover {
        transform: scale(1.05);
    }

    .chat-button-pulse {
        animation: none;
        box-shadow: 0 0 0 0 rgba(67, 97, 238, 0.7);
        transition: box-shadow 2s ease-in-out;
    }

    .chat-button-pulse:hover {
        box-shadow: 0 0 0 10px rgba(67, 97, 238, 0);
    }

    .chat-button-icon {
        font-size: 24px;
    }

    .typing-indicator {
        display: flex;
        align-items: center;
        padding: 12px 16px;
        background-color: var(--chat-bot-bubble);
        border-radius: 18px;
        border-top-left-radius: 4px;
        max-width: 85%;
        align-self: flex-start;
        margin-left: 8px;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        transition: opacity 0.3s ease, transform 0.3s ease;
    }

    .typing-dot {
        width: 8px;
        height: 8px;
        margin: 0 2px;
        background-color: var(--chat-text-light);
        border-radius: 50%;
        display: inline-block;
        transition: transform 0.3s ease, opacity 0.3s ease;
    }

    .typing-dot-1 {
        animation: none;
        transition: transform 1.4s ease-in-out, opacity 1.4s ease-in-out;
    }

    .typing-dot-2 {
        animation: none;
        transition: transform 1.4s ease-in-out, opacity 1.4s ease-in-out;
        transition-delay: 0.2s;
    }

    .typing-dot-3 {
        animation: none;
        transition: transform 1.4s ease-in-out, opacity 1.4s ease-in-out;
        transition-delay: 0.4s;
    }

    .typing-dot-animate {
        transform: translateY(-5px);
        opacity: 1;
    }

    /* Responsive design */
    @@media(max - width: 576px) {
        .chat-popup {
            width: calc(100% - 40px);
            height: calc(100% - 100px);
            bottom: 80px;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const chatPopup = document.getElementById('chat-popup');
        const chatButton = document.getElementById('chat-button');
        const minimizeChat = document.getElementById('minimize-chat');
        const resetChat = document.getElementById('reset-chat');
        const chatForm = document.getElementById('chat-form');
        const userMessageInput = document.getElementById('user-message');
        const chatMessages = document.getElementById('chat-messages');

        // Add pulse effect to chat button
        setInterval(() => {
            chatButton.classList.add('chat-button-pulse');
            setTimeout(() => {
                chatButton.classList.remove('chat-button-pulse');
            }, 2000);
        }, 4000);

        // Toggle chat popup
        chatButton.addEventListener('click', function () {
            chatPopup.style.display = 'flex';
            chatButton.style.display = 'none';

            // Force reflow
            void chatPopup.offsetWidth;

            chatPopup.classList.add('show');
            chatPopup.classList.remove('hide');

            scrollToBottom();
            userMessageInput.focus();
        });

        // Minimize chat
        minimizeChat.addEventListener('click', function () {
            chatPopup.classList.remove('show');
            chatPopup.classList.add('hide');

            setTimeout(() => {
                chatPopup.style.display = 'none';
                chatButton.style.display = 'flex';
            }, 280);
        });

        // Reset chat
        resetChat.addEventListener('click', function () {
            // Add reset animation
            chatMessages.style.opacity = '0';
            chatMessages.style.transform = 'translateY(20px)';

            setTimeout(() => {
                // Clear chat messages except the first welcome message
                while (chatMessages.children.length > 1) {
                    chatMessages.removeChild(chatMessages.lastChild);
                }

                // Reset chat on server
                fetch('/api/ChatApi/reset', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                // Restore animation
                chatMessages.style.opacity = '1';
                chatMessages.style.transform = 'translateY(0)';
                chatMessages.style.transition = 'all 0.3s ease';
            }, 300);

            setTimeout(() => {
                chatMessages.style.transition = '';
            }, 600);
        });

        // Add Prism.js for syntax highlighting
        const prismCss = document.createElement('link');
        prismCss.rel = 'stylesheet';
        prismCss.href = 'https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/themes/prism-okaidia.min.css';
        document.head.appendChild(prismCss);

        const prismJs = document.createElement('script');
        prismJs.src = 'https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/components/prism-core.min.js';
        document.head.appendChild(prismJs);

        const prismAutoloader = document.createElement('script');
        prismAutoloader.src = 'https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/plugins/autoloader/prism-autoloader.min.js';
        document.head.appendChild(prismAutoloader);

        // Add marked.js for Markdown parsing
        const markedJs = document.createElement('script');
        markedJs.src = 'https://cdn.jsdelivr.net/npm/marked/marked.min.js';
        document.head.appendChild(markedJs);

        // Add styles for markdown content
        const markdownStyles = document.createElement('style');
        markdownStyles.textContent = `
                            .message-content {
                                overflow-wrap: break-word;
                            }
            
                            .message-content p {
                                margin-bottom: 0.75rem;
                            }
            
                            .message-content p:last-child {
                                margin-bottom: 0;
                            }
            
                            .message-content ul, .message-content ol {
                                padding-left: 1.5rem;
                                margin-bottom: 0.75rem;
                            }
            
                            .message-content li {
                                margin-bottom: 0.25rem;
                            }
            
                            .message-content pre {
                                background: #272822;
                                border-radius: 0.3rem;
                                padding: 0.5rem;
                                margin: 0.75rem 0;
                                position: relative;
                            }
            
                            .message-content code {
                                font-family: 'Consolas', 'Monaco', 'Andale Mono', monospace;
                                font-size: 0.9rem;
                            }
            
                            .message-content :not(pre) > code {
                                background: rgba(0,0,0,0.05);
                                padding: 0.1rem 0.3rem;
                                border-radius: 0.2rem;
                                color: #e83e8c;
                            }
            
                            .message-content table {
                                border-collapse: collapse;
                                margin: 0.75rem 0;
                                width: 100%;
                            }
            
                            .message-content th, .message-content td {
                                border: 1px solid #dee2e6;
                                padding: 0.5rem;
                                text-align: left;
                            }
            
                            .message-content th {
                                background-color: #f8f9fa;
                            }
            
                            .message-content blockquote {
                                border-left: 4px solid #dee2e6;
                                padding-left: 1rem;
                                margin-left: 0;
                                color: #6c757d;
                            }
            
                            .message-content img {
                                max-width: 100%;
                                height: auto;
                            }
            
                            .message-content h1, .message-content h2, .message-content h3, 
                            .message-content h4, .message-content h5, .message-content h6 {
                                margin-top: 1rem;
                                margin-bottom: 0.5rem;
                                font-weight: 600;
                            }
            
                            .message-content h1 { font-size: 1.5rem; }
                            .message-content h2 { font-size: 1.4rem; }
                            .message-content h3 { font-size: 1.3rem; }
                            .message-content h4 { font-size: 1.2rem; }
                            .message-content h5 { font-size: 1.1rem; }
                            .message-content h6 { font-size: 1rem; }
            
                            .copy-button {
                                position: absolute;
                                top: 0.25rem;
                                right: 0.25rem;
                                padding: 0.15rem 0.5rem;
                                background: rgba(255,255,255,0.1);
                                border: none;
                                border-radius: 0.2rem;
                                color: #abb2bf;
                                font-size: 0.7rem;
                                cursor: pointer;
                                transition: all 0.2s ease;
                            }
            
                            .copy-button:hover {
                                background: rgba(255,255,255,0.2);
                                color: white;
                            }
            
                            .user-message .message-content pre {
                                background: rgba(0,0,0,0.3);
                            }
            
                            .user-message .message-content :not(pre) > code {
                                background: rgba(255,255,255,0.2);
                                color: white;
                            }
                        `;
        document.head.appendChild(markdownStyles);

        // Function to add copy buttons to code blocks
        function addCopyButtonsToCodeBlocks() {
            document.querySelectorAll('.message-content pre').forEach(pre => {
                if (!pre.querySelector('.copy-button')) {
                    const copyButton = document.createElement('button');
                    copyButton.className = 'copy-button';
                    copyButton.textContent = 'Copy';
                    copyButton.addEventListener('click', () => {
                        const code = pre.querySelector('code').textContent;
                        navigator.clipboard.writeText(code).then(() => {
                            copyButton.textContent = 'Copied!';
                            setTimeout(() => {
                                copyButton.textContent = 'Copy';
                            }, 2000);
                        });
                    });
                    pre.appendChild(copyButton);
                }
            });
        }

        // Override appendMessage function to handle Markdown
        function appendMessage(message, className, isUser) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${className}`;

            const avatarDiv = document.createElement('div');
            avatarDiv.className = 'message-avatar';

            const avatarIcon = document.createElement('i');
            avatarIcon.className = isUser ? 'bi bi-person-fill' : 'bi bi-robot';
            avatarDiv.appendChild(avatarIcon);

            const contentDiv = document.createElement('div');
            contentDiv.className = 'message-content';

            // Parse markdown if it's a bot message
            if (!isUser && typeof marked !== 'undefined') {
                contentDiv.innerHTML = marked.parse(message);

                // Process after a small delay to ensure DOM is updated
                setTimeout(() => {
                    // Apply syntax highlighting to code blocks
                    if (typeof Prism !== 'undefined') {
                        contentDiv.querySelectorAll('pre code').forEach((block) => {
                            Prism.highlightElement(block);
                        });
                    }

                    // Add copy buttons to code blocks
                    addCopyButtonsToCodeBlocks();
                }, 0);
            } else {
                const paragraph = document.createElement('p');
                paragraph.textContent = message;
                contentDiv.appendChild(paragraph);
            }

            messageDiv.appendChild(avatarDiv);
            messageDiv.appendChild(contentDiv);

            // Add with animation using classes instead of inline styles
            messageDiv.classList.add('hide');
            chatMessages.appendChild(messageDiv);

            // Force reflow
            void messageDiv.offsetWidth;

            // Apply animation
            messageDiv.classList.remove('hide');
            messageDiv.classList.add('show');

            scrollToBottom();
        }

        // Override the global appendMessage function
        window.appendMessage = appendMessage;

        // Send message
        chatForm.addEventListener('submit', function (e) {
            e.preventDefault();

            const userMessage = userMessageInput.value.trim();
            if (!userMessage) return;

            // Add user message to chat
            appendMessage(userMessage, 'user-message', true);

            // Clear input
            userMessageInput.value = '';

            // Show typing indicator
            showTypingIndicator();

            // Send message to server
            fetch('/api/ChatApi/send', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ message: userMessage })
            })
                .then(response => response.json())
                .then(data => {
                    // Hide typing indicator
                    hideTypingIndicator();

                    // Add bot response to chat
                    appendMessage(data.response, 'bot-message', false);
                })
                .catch(error => {
                    // Hide typing indicator
                    hideTypingIndicator();

                    // Show error message
                    appendMessage('Xin lỗi, tôi gặp lỗi khi xử lý yêu cầu của bạn. Vui lòng thử lại sau.', 'bot-message', false);
                    console.error('Error:', error);
                });
        });

        function showTypingIndicator() {
            const indicator = document.createElement('div');
            indicator.className = 'typing-indicator';
            indicator.id = 'typing-indicator';

            const avatarDiv = document.createElement('div');
            avatarDiv.className = 'message-avatar';

            const avatarIcon = document.createElement('i');
            avatarIcon.className = 'bi bi-robot';
            avatarDiv.appendChild(avatarIcon);

            const typingDiv = document.createElement('div');
            typingDiv.className = 'typing-dots';

            for (let i = 0; i < 3; i++) {
                const dot = document.createElement('div');
                dot.className = `typing-dot typing-dot-${i + 1}`;
                typingDiv.appendChild(dot);

                // Animate dots with CSS transitions instead of keyframes
                setInterval(() => {
                    dot.classList.add('typing-dot-animate');
                    setTimeout(() => {
                        dot.classList.remove('typing-dot-animate');
                    }, 700);
                }, 1400);
            }

            const messageWrapper = document.createElement('div');
            messageWrapper.className = 'message bot-message';
            messageWrapper.appendChild(avatarDiv);
            messageWrapper.appendChild(indicator);

            indicator.appendChild(typingDiv);

            // Add with animation
            messageWrapper.classList.add('hide');
            chatMessages.appendChild(messageWrapper);

            // Force reflow
            void messageWrapper.offsetWidth;

            // Apply animation
            messageWrapper.classList.remove('hide');
            messageWrapper.classList.add('show');

            scrollToBottom();
        }

        function hideTypingIndicator() {
            const indicator = document.querySelector('.message:has(#typing-indicator)');
            if (indicator) {
                // Fade out animation
                indicator.classList.remove('show');
                indicator.classList.add('hide');

                setTimeout(() => {
                    if (indicator.parentNode) {
                        chatMessages.removeChild(indicator);
                    }
                }, 200);
            }
        }

        function scrollToBottom() {
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
    });
</script>